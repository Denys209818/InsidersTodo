{"version":3,"file":"static/js/777.a58e583f.chunk.js","mappings":"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","sources":["components/custom/Input.tsx","components/AuthPage/validation/registerValidation.ts","components/custom/Spinner.tsx","components/AuthPage/index.ts","components/AuthPage/AuthPage.tsx"],"sourcesContent":["export type InputType = {\n    id: string;\n    label: string;\n    type?: string;\n    placeholder: string;\n    value: string;\n    onChangeHandler: (arg: string) => void;\n    errors: string[];\n};\n\nexport const Input: React.FC<InputType> = ({ id, type = 'text', label, placeholder, value, onChangeHandler, errors}) => {\n    return (<div>\n        <label\n            htmlFor={id}\n            className=\"text-black font-medium text-lg\"\n        >\n            {label}\n        </label>\n\n        <input\n            type={type}\n            id={id}\n            name={id}\n            placeholder={placeholder}\n            value={value}\n            onChange={(e) => onChangeHandler(e.target.value)}\n            className={`\n            block\n            w-full\n            px-2\n            py-3\n            outline-none\n            border\n            border-black  \n            text-lg\n        `}\n        />\n\n        {errors && errors.map(err => {\n            return err && err.length > 0 && (<p className=\"text-[#A31D1D]\" key={err}>{err}</p>)\n        })}\n    </div>)\n}","import { object, string } from 'yup';\n\nexport const registerSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  name: string().required('Поле обов\\'язкове!'),\n  password: string().required().min(6, 'Пароль має містити 6 символів'),\n});","import '../../spinner.css';\n\nexport const Spinner = () => {\n    return <div className={`\n        absolute\n        left-[-100%]\n        top-[50%]\n        -translate-y-2/4\n        size-8\n    `}>\n        <div className='loader'></div>\n    </div>\n}","import { AuthPage } from \"./AuthPage\";\n\nexport default AuthPage;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Navigate, useNavigate, useParams } from \"react-router-dom\";\nimport { Input } from \"../custom/Input\";\nimport { useEffect, useState } from \"react\";\nimport { LoginUser, RegisterUser } from \"../../actions/AuthActions\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { registerSchema } from \"./validation/registerValidation\";\nimport * as Yup from 'yup';\nimport { Spinner } from \"../custom/Spinner\";\n\nexport const AuthPage = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (registerErrors['name']) {\n            setRegisterErrors(prev => ({\n                ...prev,\n                name: []\n            }));\n        }\n    }, [name]);\n\n    useEffect(() => {\n        if (registerErrors['email']) {\n            setRegisterErrors(prev => ({\n                ...prev,\n                email: []\n            }));\n        }\n    }, [email]);\n\n    useEffect(() => {\n        if (registerErrors['password']) {\n            setRegisterErrors(prev => ({\n                ...prev,\n                password: []\n            }));\n        }\n    }, [password]);\n\n    const [registerErrors, setRegisterErrors] = useState<{[key: string]: string[]}>({});\n\n    const dispatch = useAppDispatch();\n\n    const { error, isLoading } = useAppSelector(state => state.user);\n\n    const { authType } = useParams();\n\n    if (authType !== 'register' && authType !== 'login') {\n        return <Navigate to={'/auth/login'} />\n    }\n\n    async function Log() {\n        await dispatch(LoginUser({\n            email: email,\n            password: password,\n        }));\n        \n        navigate('/profile');\n    }\n\n    async function Reg(data: { name: string, email: string, password: string }) {\n        await dispatch(RegisterUser({\n            name: data.name,\n            email: data.email,\n            password: data.password,\n        }));\n\n        if (!error) {\n            navigate('/profile');\n        }\n    }\n\n    const handleSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        switch (authType) {\n            case 'login': {\n                Log();\n\n                break;\n            }\n\n            case 'register': {\n                registerSchema.validate({\n                    email,\n                    password,\n                    name\n                }, { abortEarly: false })\n                    .then((data) => {\n                        Reg(data);\n                    })\n                    .catch((err: any) => {\n                        const errors: { [key: string]: string[] } = {};\n\n                        err.inner.forEach((item: Yup.ValidationError) => {\n                            if (item.path) {\n                                errors[item.path] = item.errors;\n                            }\n                        });\n\n                        setRegisterErrors(errors);\n                    });\n\n                break;\n            }\n        }\n    }\n\n    const title = authType === 'register' ? 'Register' : 'Login';\n\n    return (<>\n        <section className=\"flex justify-center items-center w-full\">\n            <div className=\"block p-3 border-black rounded-xl w-[50%] bg-[#F5F7F8] overflow-hidden\">\n                <h2 className=\"font-semibold uppercase text-3xl text-center\">\n                    {title}\n                </h2>\n\n                <div className=\"flex flex-col gap-4\">\n                    <form onSubmit={handleSubmitForm} className=\"flex flex-col gap-4 w-full mt-4\">\n                        {authType === 'register' && <Input\n                            value={name}\n                            onChangeHandler={(arg) => setName(arg)}\n                            placeholder=\"Enter a name\"\n                            id=\"name\"\n                            label=\"Name\"\n                            errors={registerErrors['name']}\n                        />}\n\n                        <Input\n                            value={email}\n                            onChangeHandler={(arg) => setEmail(arg)}\n                            placeholder=\"Enter an email\"\n                            id=\"email\"\n                            label=\"Email\"\n                            errors={registerErrors['email']}\n                        />\n\n                        <Input\n                            value={password}\n                            type=\"password\"\n                            onChangeHandler={(arg) => setPassword(arg)}\n                            placeholder=\"Enter a password\"\n                            id=\"password\"\n                            label=\"Password\"\n                            errors={registerErrors['password']}\n                        />\n\n                        <button className={`\n                            relative\n                            block\n                            w-full\n                            outline-none\n                            border\n                            py-4\n                            bg-[#03001C]\n                            text-white\n                            uppercase\n                            transition\n                            duration-300\n                            ease-in-out\n                            hover:bg-[#301E67]\n                            text-lg\n                            font-bold\n                            `}\n                            disabled={isLoading}\n                            >\n                            <span className=\"relative\">{isLoading && <Spinner/>} {title}</span>\n                        </button>\n                    </form>\n\n                    {error && <pre className=\"text-[#A31D1D]\">\n                        {error}    \n                    </pre>}\n                </div>\n            </div>\n        </section>\n    </>);\n}"],"names":["Input","_ref","id","type","label","placeholder","value","onChangeHandler","errors","_jsxs","children","_jsx","htmlFor","className","name","onChange","e","target","map","err","length","registerSchema","object","shape","email","string","required","password","min","Spinner","AuthPage","setName","useState","setEmail","setPassword","navigate","useNavigate","useEffect","registerErrors","setRegisterErrors","prev","_objectSpread","dispatch","useAppDispatch","error","isLoading","useAppSelector","state","user","authType","useParams","Navigate","to","title","_Fragment","onSubmit","event","preventDefault","async","LoginUser","Log","validate","abortEarly","then","data","RegisterUser","Reg","catch","inner","forEach","item","path","arg","disabled"],"sourceRoot":""}