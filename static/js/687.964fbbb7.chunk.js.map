{"version":3,"file":"static/js/687.964fbbb7.chunk.js","mappings":"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","sources":["todoHooks.ts","components/custom/Profile/TodoItem.tsx","components/custom/Profile/TodoList.tsx","components/custom/Profile/TableColumn.tsx","components/custom/Profile/validation/emailValidation.ts","components/custom/Profile/Modal.tsx","components/custom/Profile/TableList.tsx","components/ProfilePage/index.ts","components/ProfilePage/ProfilePage.tsx"],"sourcesContent":["import { collection, getDocs, updateDoc, query, where, orderBy, limit, setDoc, doc, deleteDoc} from \"firebase/firestore\";\nimport {db} from './firebase';\nimport { Todo } from \"./redux/types/todo\";\nimport { TodoTable } from \"./redux/types/table\";\n\nasync function getLastDocumentId(collectionName: string) {\n    const q = query(\n        collection(db, collectionName), \n        orderBy(\"Id\", \"desc\"),\n        limit(1)\n    );\n\n    try {\n        const querySnapshot = await getDocs(q);\n        if (!querySnapshot.empty) {\n            const lastDocument = querySnapshot.docs[0].data();\n            return lastDocument['Id'];\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching the last document:\", error);\n\n        return null;\n    }\n}\n\nexport const getTodosByTableId = async (tableId: number) => {\n    const q = query(collection(db, \"Todo\"), where(\"TableId\", \"==\", tableId));\n\n    const querySnapshot = await getDocs(q);\n\n    if (!querySnapshot.empty) {\n        const todos = querySnapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n        }));\n\n        return todos;\n    } else {\n        return [];\n    }\n}\n\nexport const getTablesByEmail = async (userEmail: string) => {\n    const q = query(collection(db, \"UserTable\"), where('Email', '==', userEmail));\n\n    const querySnapshot = await getDocs(q);\n    \n    if (!querySnapshot.empty) {\n        const userTables = querySnapshot.docs.map(async (doc) => {\n            const docItem = doc.data();\n\n            const tablesQuery = query(collection(db, \"Table\"), where(\"Id\", \"==\", docItem['TableId']));\n\n            const querySnapshotTables = await getDocs(tablesQuery);\n\n            if (!querySnapshotTables.empty) {\n                const allTables = querySnapshotTables.docs.map(d => ({ ...d.data() }));\n\n                return {...allTables[0], Status: docItem['Status']};\n            }\n\n            return null;\n        });\n\n        const received: ({[x: string]: any}|null)[]= [];\n\n        for (const usrTbl of userTables) {\n            if (usrTbl !== null) {\n                const result = await usrTbl;\n                received.push(result);\n            }\n        }\n\n        return received;\n    } else {        \n        return [];\n    }\n}\n\nexport const createTable = async (title: string, userEmail: string) => {\n    const nextId = (await getLastDocumentId('Table') || 1) + 1;\n    const nextIdUserTable = (await getLastDocumentId('UserTable') || 0) + 1;\n\n    await setDoc(doc(db, \"Table\", \"Table\" + nextId), {\n        Id: nextId,\n        Title: title,\n    });\n\n    await setDoc(doc(db, \"UserTable\", \"UserTable\" + nextIdUserTable), {\n        Id: nextIdUserTable,\n        Email: userEmail,\n        Status: 'ADMIN',\n        TableId: nextId,\n    });\n\n    return {\n        id: nextId,\n        title,\n    };\n}\n\nexport const updateTable = async (updatedTable: TodoTable) => {\n    const q = query(collection(db, \"Table\"), where('Id', '==', updatedTable.id));\n\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.empty) {\n        console.error(\"No document found with the specified Id.\", querySnapshot);\n        return;\n    }\n\n    querySnapshot.forEach(async (docSnapshot) => {\n        const documentRef = docSnapshot.ref;\n        await updateDoc(documentRef, {\n            Title: updatedTable.title,\n            Status: updatedTable.status,\n        });\n    });\n}\n\nexport const deleteTable = async (id: number) => {\n    await deleteDoc(doc(db, \"Table\", \"Table\" + id));\n    \n    const q = query(collection(db, \"Todo\"), where(\"TableId\", \"==\", id));\n    const qMiddleTable = query(collection(db, \"UserTable\"), where(\"TableId\", \"==\", id));\n\n    const querySnapshot = await getDocs(q);\n    const querySnapshotMiddleTable = await getDocs(qMiddleTable);\n\n    if (!querySnapshot.empty) {\n        for (const docEntity of querySnapshot.docs) {\n            await deleteDoc(docEntity.ref);\n        }\n    }\n\n    if (!querySnapshotMiddleTable.empty) {\n        for (const docEntity of querySnapshotMiddleTable.docs) {\n            await deleteDoc(docEntity.ref);\n        }\n    }\n}\n\nexport const updateTodo = async (updatedTodo: Omit<Todo, 'tableId'>) => {\n    const q = query(collection(db, \"Todo\"), where('Id', '==', updatedTodo.id));\n\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.empty) {\n        console.error(\"No document found with the specified Id.\", querySnapshot);\n        return;\n    }\n\n    querySnapshot.forEach(async (docSnapshot) => {\n        const documentRef = docSnapshot.ref;\n        await updateDoc(documentRef, {\n            Title: updatedTodo.title,\n            Completed: updatedTodo.completed\n        });\n    });\n}\n\nexport const createTodo = async (tableId: number) => {\n    const nextId = (await getLastDocumentId('Todo') || 1) + 1;\n\n    await setDoc(doc(db, \"Todo\", \"Todo\" + nextId), {\n        Completed: false,\n        Title: '',\n        TableId: tableId,\n        Id: nextId\n    });\n\n    return {\n        id: nextId,\n        title: '',\n        tableId: tableId,\n        completed: false,\n    };\n}\n\nexport const deleteTodo = async (id: number) => {\n    await deleteDoc(doc(db, \"Todo\", \"Todo\" + id));\n}\n\nexport const grantRules = async (tableId: number, email: string, status: string) => {\n    const q = query(collection(db, \"UserTable\"), \n        where('Email', '==', email),\n        where('TableId', '==', tableId)\n    );\n\n    const querySnapshot = await getDocs(q);\n\n    if (querySnapshot.empty) {\n        const nextIdUserTable = (await getLastDocumentId('UserTable') || 0) + 1;\n\n        await setDoc(doc(db, \"UserTable\", \"UserTable\" + nextIdUserTable), {\n            Id: nextIdUserTable,\n            Email: email,\n            Status: status,\n            TableId: tableId,\n        });\n    }\n}","import { useRef, useState } from \"react\";\nimport { useAppDispatch } from \"../../../hooks\";\nimport { todosActions } from \"../../../redux/reducers/todoSlice\";\nimport { deleteTodo, updateTodo } from \"../../../todoHooks\";\n\nexport type TodoItemType = {\n    id: number;\n    title: string;\n    statusTable: 'ADMIN'|'VIEW';\n    completed: boolean;\n}\n\nexport const TodoItem: React.FC<TodoItemType> = ({ id, title, completed, statusTable }) => {\n    const todoRef = useRef<HTMLInputElement>(null);\n    const [isEdit, setIsEdit] = useState(false);\n    const [isLoad, setIsLoad] = useState(false);\n\n    const dispatch = useAppDispatch();\n\n    const onEdit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n    \n        if (todoRef.current) {  \n            const todoTitle = todoRef.current.value;\n            \n            updateTodo({ id, title: todoTitle, completed });\n            dispatch(todosActions.editTodo({ id: id, title: todoTitle}));\n        }\n\n        setIsEdit(false);\n    }\n\n    const isEmpty = title === '';\n\n    const onEditChecked = () => {\n        updateTodo({ id, title, completed: !completed });\n\n        dispatch(todosActions.editTodoStatus(id));\n    }\n\n    const onDelete = () => {\n        setIsLoad(true);\n\n        deleteTodo(id).then(() => {\n            dispatch(todosActions.removeTodo(id));\n        })\n        .finally(() => {\n            setIsLoad(false);\n        });\n    }\n\n    const onDeleteAction =  statusTable === 'ADMIN' ? onDelete : undefined\n\n\n    return (<div\n        className=\"grid grid-cols-12 p-4 border border-black rounded-md\"\n    >   \n        <div className=\"flex gap-2 col-span-11\">\n            <input\n                type=\"checkbox\"\n                checked={completed}\n                onChange={onEditChecked}\n                className=\"size-6\"\n            />\n\n            <div\n                className=\"w-full\"\n                onDoubleClick={() => setIsEdit(true && statusTable === 'ADMIN')}\n                onMouseLeave={() => isEdit && setIsEdit(false)}\n            >\n                {!isEdit && !isEmpty && <h3>{title}</h3>}\n                {(isEdit || isEmpty) && (<form onSubmit={onEdit}>\n                    <input\n                        type=\"text\"\n                        defaultValue={title}\n                        ref={todoRef}\n                        className=\"bg-transparent rounded-lg w-full outline-none border-2 size-full px-2\"\n                    />\n                </form>)}\n\n\n            </div>\n        </div>\n\n        <div className=\"block grid-cols-1\">\n            <button \n                className=\"text-red-600 disabled:text-slate-400 uppercase\"\n                onClick={onDeleteAction}\n                disabled={isLoad}\n            >\n                Delete\n            </button>\n        </div>\n    </div>)\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks\";\nimport { TodoItem } from \"./TodoItem\";\nimport { todosActions } from \"../../../redux/reducers/todoSlice\";\nimport { createTodo, getTodosByTableId } from \"../../../todoHooks\";\n\nexport const TodoList = () => {\n    const todos = useAppSelector(state => state.todos);\n    const { activeTable } = useAppSelector(state => state.tables);\n\n    const dispatch = useAppDispatch();\n\n    const [isAdding, setIsAdding] = useState(false);\n\n    const onCreateTask = () => {\n        if (activeTable) {\n            setIsAdding(true);\n\n            createTodo(activeTable.id)\n                .then(newTodo => {\n                    dispatch(todosActions.addTodo({\n                        id: newTodo.id,\n                        title: newTodo.title,\n                        completed: newTodo.completed,\n                        tableId: activeTable.id\n                    }));\n                })\n                .finally(() => setIsAdding(false));\n        }\n    }\n\n    useEffect(() => {\n        if (activeTable) {\n            getTodosByTableId(activeTable.id)\n            .then((data) => {\n                const todos = data as unknown[];\n\n                const preparedTodos = [...todos.map((td: any) => ({\n                    id: td.Id,\n                    title: td.Title,\n                    tableId: td.TableId,\n                    completed: td.Completed\n                }))];\n                \n                dispatch(todosActions.setTodos([...preparedTodos]));\n            });\n        }\n    }, [activeTable]);\n\n    const onCreateAction = activeTable && activeTable.status === 'ADMIN' ? onCreateTask : undefined;\n\n    if (!activeTable) {\n        return <></>;\n    }\n\n    return (<div className=\"block border border-black h-full-height-with-paddings pt-5 overflow-y-auto px-3\">\n        <h1 className=\"text-6xl font-semibold text-center\">\n            {activeTable?.title}\n        </h1>\n\n        <button className={`\n                block\n                p-4\n                bg-[#03001C]\n                text-white\n                rounded-lg\n                hover:bg-[#301E67]\n                transition \n                duration-300 \n                ease-in-out\n                mt-3\n                mx-auto\n                disabled:bg-slate-400\n            `}\n            onClick={onCreateAction}\n            disabled={onCreateAction === undefined || isAdding}\n            >\n            Create a task\n        </button>\n\n        <div className=\"flex flex-col gap-4 mt-3\">\n            {todos.map(td => (\n                <TodoItem\n                    key={td.id}\n                    title={td.title}\n                    id={td.id}\n                    completed={td.completed}\n                    statusTable={activeTable?.status || 'VIEW'}\n                />\n            ))}\n        </div>\n    </div>);\n}","import { useRef, useState } from \"react\";\nimport { tablesActions } from \"../../../redux/reducers/tableSlice\";\nimport { useAppDispatch } from \"../../../hooks\";\nimport { TodoTable } from \"../../../redux/types/table\";\nimport { deleteTable, updateTable } from \"../../../todoHooks\";\n\nexport type TableColumnType = Omit<TodoTable, 'todos'> & { active: boolean, openModal: () => void };\n\nexport const TableColumn = ({ id, title, active, status, openModal }: TableColumnType) => {\n    const refEditable = useRef<HTMLInputElement>(null);\n    const [isEdit, setIsEdit] = useState(false);\n    const [isLoad, setIsLoad] = useState(false);\n\n    const dispatch = useAppDispatch();\n\n    const onEdit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (refEditable.current) {\n            const newTitle = refEditable.current.value;\n\n            updateTable({ id, status, title: newTitle }).then(() => {\n                dispatch(tablesActions.editTable({ id: id, newTitle: newTitle}));\n            });\n        }\n\n        setIsEdit(false);\n    }\n\n    const removeTable = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        event.stopPropagation();\n\n        setIsLoad(true);\n        \n        deleteTable(id)\n        .then(() => {\n            dispatch(tablesActions.removeTable(id));\n        })\n        .finally(() => {\n            setIsLoad(false);\n        });\n    }\n    \n    return (<li className={`\n        flex\n        justify-between\n        items-center\n        border-[#5B8FB9]\n        border \n        rounded-lg \n        p-2 \n        text-white \n        hover:bg-[#5B8FB9] \n        hover:cursor-pointer\n        transition \n        duration-300 \n        ease-in-out\n        ${active ? 'bg-[#5B8FB9]' : undefined}\n    `}\n        onClick={() => dispatch(tablesActions.setActiveTable(id))}\n        onDoubleClick={status === 'ADMIN' ? () => setIsEdit(true) : undefined}\n        onMouseLeave={() => isEdit && setIsEdit(false)}\n    >\n        {!isEdit && <p>{title}</p>}\n        {isEdit && <form onSubmit={onEdit}><input\n            ref={refEditable}\n            className=\"bg-transparent rounded-lg w-full outline-none border-2 size-full px-2\"\n            defaultValue={title}\n        /></form>}\n\n        {status === 'ADMIN' && <div className=\"flex gap-2\">\n            <button\n                className={`\n                    text-green-500\n                    hover:cursor-pointer\n                `}\n                disabled={isLoad}\n                onClick={openModal}\n            >\n                GRANT\n            </button>\n\n            <button\n                className={`\n                    text-red-500\n                    hover:cursor-pointer\n                `}\n                onClick={removeTable}\n                disabled={isLoad}\n            >\n                DEL\n            </button>\n        </div>}\n    </li>);\n}","import { object, string } from 'yup';\n\nexport const emailSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!')\n});","import { createPortal } from \"react-dom\";\nimport { emailSchema } from \"./validation/emailValidation\";\nimport { useState } from \"react\";\nimport * as Yup from 'yup';\nimport { grantRules } from \"../../../todoHooks\";\nimport { useAppSelector } from \"../../../hooks\";\n\nexport type ModalType = {\n    isOpen: boolean;\n    onClose: () => void;\n};\n\nconst Modal: React.FC<ModalType> = ({ isOpen = true, onClose }) => {\n    const [email, setEmail] = useState({\n        value: '',\n        errors: {}\n    });\n    const [status, setStatus] = useState('ADMIN');\n    const [isGrant, setIsGrant] = useState(false);\n    \n    const { activeTable } = useAppSelector(state => state.tables);\n\n    const onSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        emailSchema.validate({\n            email: email.value,\n        }, { abortEarly: false })\n        .then((validated) => {\n            if (activeTable) {\n                setIsGrant(true);\n\n                grantRules(activeTable.id, validated.email, status)\n                .then(() => {\n                    onClose();\n                })\n                .finally(() => {\n                    setIsGrant(false);\n                });\n            }\n        })\n        .catch((err: any) => {\n            const errors: { [key: string]: string[] } = {};\n\n            err.inner.forEach((item: Yup.ValidationError) => {\n                if (item.path) {\n                    errors[item.path] = item.errors;\n                }\n            });\n\n\n            console.log(Object.values(errors));\n            setEmail(prev => ({\n                ...prev,\n                errors: errors,\n            }));\n        });;\n    }\n\n    return (createPortal(\n    <dialog\n    open={isOpen}\n    className={`\n        fixed\n        z-50\n        top-0\n        left-0\n        \n        size-full\n        bg-[#a6aebf8f]\n    `}\n    >\n        <div className={`\n            absolute \n            left-1/2 \n            top-1/2 \n            -translate-x-1/2 \n            -translate-y-1/2 \n            block w-[60%] \n            border-black \n            border p-6 \n            bg-white\n        `}>\n            <div className=\"flex justify-between items-center\">\n                <h1 className=\"font-bold text-4xl\">\n                    Grant permission\n                </h1>\n\n                <button\n                    onClick={onClose}\n                    className={`\n                        transition \n                        duration-300\n                        ease-in-out\n                        p-1\n                        hover:bg-red-400\n                        hover:text-white\n                    `}\n                >\n                    CLOSE\n                </button>\n            </div>\n\n            <form className={`\n                flex\n                flex-col\n                gap-4\n                w-full\n                pt-4\n            `}\n            onSubmit={onSubmitHandler}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Write an email\"\n                    className={`block border border-black px-4 py-2 w-full`}\n                    value={email.value}\n                    onChange={(e) => setEmail(prev => ({...prev, value: e.target.value}))}\n                />\n\n                {email.errors && \n                    Object.values(email.errors).map((value: any) => (\n                        <p className=\"text-red-400\">\n                            {value.reduce((prev: string, curr: string) => prev + curr + '\\n', '')}\n                        </p>\n                    ))}\n\n                <select \n                    name=\"role\" \n                    id=\"role\" \n                    className=\"px-4 py-2 border border-black\" \n                    value={status} \n                    onChange={e => setStatus(e.target.value)}\n                >\n                    <option value=\"ADMIN\">ADMIN</option>\n                    <option value=\"VIEW\">VIEWER</option>\n                </select>\n\n                <button\n                    className={`\n                        block\n                        bg-black\n                        text-white\n                        px-4\n                        py-2\n                        text-lg\n                        uppercase\n                        hover:bg-[#00000095]\n                        transition\n                        duration-300\n                        ease-in-out\n                    `}\n                    disabled={isGrant}\n                >\n                    Grant\n                </button>\n            </form>\n        </div>\n    </dialog>, document.body));\n}\n\nexport default Modal;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks\";\nimport { TableColumn } from \"./TableColumn\";\nimport { createTable, getTablesByEmail } from \"../../../todoHooks\";\nimport { tablesActions } from \"../../../redux/reducers/tableSlice\";\nimport Modal from \"./Modal\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const TableList = () => {\n    const { activeTable, tables } = useAppSelector(state => state.tables);\n    const { email } = useAppSelector(state => state.user);\n    const dispatch = useAppDispatch();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    useEffect(() => {\n        async function getAllTablesByUserEmail() {            \n            if (tables.length === 0 && email) {\n                const tabls = await getTablesByEmail(email);\n\n                if (tabls) {\n                    tabls.forEach((tab: any) => {\n                        dispatch(tablesActions.addTable({ \n                            id: tab[\"Id\"], \n                            title: tab[\"Title\"],\n                            status: tab[\"Status\"]\n                        }));\n                    });\n                }\n            }\n        }\n\n        getAllTablesByUserEmail();\n    }, []);\n\n    const [isLoad, setIsLoad] = useState(false);\n\n    const handleAddTodo = () => {\n        setIsLoad(true);\n        const tableName = 'Table' + (tables.length + 1);\n\n        createTable(tableName, email).then((created) => {\n            setIsLoad(false);\n\n            dispatch(tablesActions.addTable({\n                id: created.id,\n                title: created.title,\n                status: 'ADMIN'\n            }));\n        });\n    }\n\n    if (!email) {\n        return <Navigate to={'/auth/login'} />\n    }\n\n    return (<><ul className=\"flex flex-col gap-4 px-4 pt-4 list-none\">\n        {tables.map(table => (\n            <TableColumn\n                active={(activeTable && activeTable.id === table.id) as boolean}\n                key={table.id}\n                id={table.id}\n                title={table.title}\n                status={table.status}\n                openModal={() => setIsModalOpen(true)}\n            />\n        ))}\n\n        <li className={`\n            border-[#5B8FB9]\n            border \n            rounded-lg \n            p-2 \n            text-white \n            hover:bg-[#5B8FB9] \n            hover:cursor-pointer\n            transition \n            duration-300 \n            ease-in-out\n        `}\n            onClick={!isLoad ? handleAddTodo : undefined}\n        >\n            Створити таблицю\n        </li>\n    </ul>\n\n    <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />\n    </>);\n}","import { ProfilePage } from \"./ProfilePage\";\n\nexport default ProfilePage;","import { TodoList } from \"../custom/Profile/TodoList\";\nimport React from \"react\";\nimport { TableList } from \"../custom/Profile/TableList\";\n\nexport const ProfilePage = React.memo(() => {\n    return (<section className=\"w-full min-h-full-height\">\n        <div className=\"grid grid-cols-12 gap-x-4\">\n            <div className=\"sticky top-[64px] block col-span-4 bg-[#301E67] h-full-height\">\n                <h4 className=\"block pt-4 px-4 text-white\">Список таблиць</h4>\n\n                <TableList />\n            </div>\n            <div className=\"col-span-8 p-4\">\n                <div className=\"block px-2\">\n                    <TodoList />\n                </div>\n            </div>\n        </div>\n        \n    </section>)\n})"],"names":["async","getLastDocumentId","collectionName","q","query","collection","db","orderBy","limit","querySnapshot","getDocs","empty","docs","data","error","console","updateTodo","where","updatedTodo","id","forEach","documentRef","docSnapshot","ref","updateDoc","Title","title","Completed","completed","TodoItem","_ref","statusTable","todoRef","useRef","isEdit","setIsEdit","useState","isLoad","setIsLoad","dispatch","useAppDispatch","isEmpty","onDeleteAction","onDelete","deleteDoc","doc","deleteTodo","then","todosActions","removeTodo","finally","undefined","_jsxs","className","children","_jsx","type","checked","onChange","onEditChecked","editTodoStatus","onDoubleClick","onMouseLeave","onSubmit","event","preventDefault","current","todoTitle","value","editTodo","defaultValue","onClick","disabled","TodoList","todos","useAppSelector","state","activeTable","tables","isAdding","setIsAdding","useEffect","tableId","map","_objectSpread","getTodosByTableId","preparedTodos","td","Id","TableId","setTodos","onCreateAction","status","onCreateTask","nextId","setDoc","createTodo","newTodo","addTodo","_Fragment","TableColumn","active","openModal","refEditable","concat","tablesActions","setActiveTable","newTitle","updatedTable","Status","updateTable","editTable","stopPropagation","qMiddleTable","querySnapshotMiddleTable","docEntity","deleteTable","removeTable","emailSchema","object","shape","email","string","required","isOpen","onClose","setEmail","errors","setStatus","isGrant","setIsGrant","createPortal","open","validate","abortEarly","validated","nextIdUserTable","Email","grantRules","catch","err","inner","item","path","log","Object","values","prev","placeholder","e","target","reduce","curr","name","document","body","TableList","user","isModalOpen","setIsModalOpen","length","tabls","userEmail","userTables","docItem","tablesQuery","querySnapshotTables","allTables","d","received","usrTbl","result","push","getTablesByEmail","tab","addTable","getAllTablesByUserEmail","table","handleAddTodo","createTable","created","Modal","Navigate","to","React"],"sourceRoot":""}