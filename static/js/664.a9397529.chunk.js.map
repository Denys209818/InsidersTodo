{"version":3,"file":"static/js/664.a9397529.chunk.js","mappings":"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","sources":["components/custom/Profile/TableColumn.tsx","components/custom/Profile/TodoItem.tsx","components/custom/Profile/TodoList.tsx","todoHooks.ts","components/ProfilePage/index.ts","components/ProfilePage/ProfilePage.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { tablesActions } from \"../../../redux/reducers/tableSlice\";\nimport { useAppDispatch } from \"../../../hooks\";\nimport { TodoTable } from \"../../../redux/types/table\";\n\nexport type TableColumnType = Omit<TodoTable, 'todos'> & { active: boolean };\n\nexport const TableColumn = ({ id, title, active }: TableColumnType) => {\n    const refEditable = useRef<HTMLInputElement>(null);\n    const [isEdit, setIsEdit] = useState(false);\n\n    const dispatch = useAppDispatch();\n\n    const onEdit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (refEditable.current)\n            dispatch(tablesActions.editTable({ id: id, newTitle: refEditable.current.value}));\n\n        setIsEdit(false);\n    }\n    \n    return (<li className={`\n        border-[#5B8FB9]\n        border \n        rounded-lg \n        p-2 \n        text-white \n        hover:bg-[#5B8FB9] \n        hover:cursor-pointer\n        transition \n        duration-300 \n        ease-in-out\n        ${active ? 'bg-[#5B8FB9]' : undefined}\n    `}\n        onClick={() => dispatch(tablesActions.setActiveTable(id))}\n        onDoubleClick={() => setIsEdit(true)}\n        onMouseLeave={() => isEdit && setIsEdit(false)}\n    >\n        {!isEdit && <p>{title}</p>}\n        {isEdit && <form onSubmit={onEdit}><input\n            ref={refEditable}\n            className=\"bg-transparent rounded-lg w-full outline-none border-2 size-full px-2\"\n            defaultValue={title}\n        /></form>}\n    </li>);\n}","import { useRef, useState } from \"react\";\nimport { useAppDispatch } from \"../../../hooks\";\nimport { todosActions } from \"../../../redux/reducers/todoSlice\";\n\nexport type TodoItemType = {\n    id: number;\n    title: string;\n    completed: boolean;\n}\n\nexport const TodoItem: React.FC<TodoItemType> = ({ id, title, completed }) => {\n    const todoRef = useRef<HTMLInputElement>(null);\n    const [isEdit, setIsEdit] = useState(false);\n\n    const dispatch = useAppDispatch();\n\n    const onEdit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n    \n        if (todoRef.current)\n            dispatch(todosActions.editTodo({ id: id, title: todoRef.current.value}));\n\n        setIsEdit(false);\n    }\n\n    const isEmpty = title === '';\n\n    const onEditChecked = () => {\n        dispatch(todosActions.editTodoStatus(id));\n    }\n\n    const onDelete = () => {\n        dispatch(todosActions.removeTodo(id));\n    }\n\n\n    return (<div\n        className=\"grid grid-cols-12 p-4 border border-black rounded-md\"\n    >   \n        <div className=\"flex gap-2 col-span-11\">\n            <input\n                type=\"checkbox\"\n                checked={completed}\n                onChange={onEditChecked}\n                className=\"size-6\"\n            />\n\n            <div\n                className=\"w-full\"\n                onDoubleClick={() => setIsEdit(true)}\n                onMouseLeave={() => isEdit && setIsEdit(false)}\n            >\n                {!isEdit && !isEmpty && <h3>{title}</h3>}\n                {(isEdit || isEmpty) && (<form onSubmit={onEdit}>\n                    <input\n                        type=\"text\"\n                        defaultValue={title}\n                        ref={todoRef}\n                        className=\"bg-transparent rounded-lg w-full outline-none border-2 size-full px-2\"\n                    />\n                </form>)}\n\n\n            </div>\n        </div>\n\n        <div className=\"block grid-cols-1\">\n            <button className=\"text-red-600 uppercase\" onClick={onDelete}>Delete</button>\n        </div>\n    </div>)\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks\";\nimport { TodoItem } from \"./TodoItem\";\nimport { todosActions } from \"../../../redux/reducers/todoSlice\";\nimport { faker } from \"@faker-js/faker\";\nimport { getTodosByTableId } from \"../../../todoHooks\";\n\nexport const TodoList = () => {\n    const todos = useAppSelector(state => state.todos);\n    const { activeTable } = useAppSelector(state => state.tables);\n\n    const dispatch = useAppDispatch();\n\n    const onCreateTask = () => {\n        if (activeTable) {\n            dispatch(todosActions.addTodo({\n                id: faker.number.int(),\n                title: '',\n                completed: false,\n                tableId: activeTable.id\n            }));\n        }\n    }\n\n    useEffect(() => {\n        if (activeTable) {\n            getTodosByTableId(activeTable.id)\n            .then((data) => {\n                const todos = data as unknown[];\n\n                const preparedTodos = [...todos.map((td: any) => ({\n                    id: parseInt(td.Id),\n                    title: td.Title,\n                    tableId: td.TableId,\n                    completed: td.Completed\n                }))];\n                \n                dispatch(todosActions.setTodos([...preparedTodos]));\n            });\n        }\n    }, [activeTable]);\n\n    return (<div className=\"block border border-black h-full-height-with-paddings pt-5 overflow-y-auto px-3\">\n        <h1 className=\"text-6xl font-semibold text-center\">\n            {activeTable?.title}\n        </h1>\n\n        <button className={`\n                block\n                p-4\n                bg-[#03001C]\n                text-white\n                rounded-lg\n                hover:bg-[#301E67]\n                transition \n                duration-300 \n                ease-in-out\n                mt-3\n                mx-auto\n            `}\n            onClick={onCreateTask}\n            >\n            Create a task\n        </button>\n\n        <div className=\"flex flex-col gap-4 mt-3\">\n            {todos.map(td => (\n                <TodoItem\n                    key={td.id}\n                    title={td.title}\n                    id={td.id}\n                    completed={td.completed}\n                />\n            ))}\n        </div>\n    </div>);\n}","import { collection, getDocs, query, where } from \"firebase/firestore\";\nimport {db} from './firebase';\n\nexport const getTodosByTableId = async (tableId: number) => {\n    const q = query(collection(db, \"Todo\"), where(\"TableId\", \"==\", tableId));\n\n    const querySnapshot = await getDocs(q);\n\n    if (!querySnapshot.empty) {\n        const todos = querySnapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n        }));\n\n        return todos;\n    } else {\n        console.log(\"No document found with tableId:\", tableId);\n    }\n}\n\nexport const getTables = async (userId: number) => {\n    const q = query(collection(db, \"Table\"));\n\n    const querySnapshot = await getDocs(q);\n\n    if (!querySnapshot.empty) {\n        const todos = querySnapshot.docs.map((doc) => ({\n            ...doc.data(),\n        }));\n\n        return todos;\n    } else {\n        console.log(\"No document found\");\n    }\n}","import { ProfilePage } from \"./ProfilePage\";\n\nexport default ProfilePage;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\"\nimport { tablesActions } from \"../../redux/reducers/tableSlice\";\nimport { getTables } from \"../../todoHooks\";\nimport { TableColumn } from \"../custom/Profile/TableColumn\";\nimport { TodoList } from \"../custom/Profile/TodoList\";\n\nexport const ProfilePage = () => {\n    const { activeTable, tables } = useAppSelector(state => state.tables);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        getTables(1).then((tabls) => {\n            if(tabls) {\n                tabls.forEach(tab => {\n                    dispatch(tablesActions.addTable({ id: tab[\"Id\"], title: tab[\"Title\"]}));\n                });\n            }\n        });\n    }, []);\n\n    const handleAddTodo = () => {\n        dispatch(tablesActions.addTable({ id: tables.length + 1, title: 'Table' + (tables.length + 1) }));\n    }\n\n    return (<section className=\"w-full min-h-full-height\">\n        <div className=\"grid grid-cols-12 gap-x-4\">\n            <div className=\"sticky top-[64px] block col-span-4 bg-[#301E67] h-full-height\">\n                <h4 className=\"block pt-4 px-4 text-white\">Список таблиць</h4>\n\n                <ul className=\"flex flex-col gap-4 px-4 pt-4 list-none\">\n                    {tables.map(table => (\n                        <TableColumn\n                            active={(activeTable && activeTable.id === table.id) as boolean}\n                            key={table.id}\n                            id={table.id}\n                            title={table.title}/>\n                    ))}\n                    \n                    <li className={`\n                        border-[#5B8FB9]\n                        border \n                        rounded-lg \n                        p-2 \n                        text-white \n                        hover:bg-[#5B8FB9] \n                        hover:cursor-pointer\n                        transition \n                        duration-300 \n                        ease-in-out\n                    `}\n                        onClick={handleAddTodo}\n                    >\n                        Створити таблицю\n                    </li>\n                </ul>\n            </div>\n            <div className=\"col-span-8 p-4\">\n                {activeTable !== null && <div className=\"block px-2\">\n                    <TodoList />\n                </div>}\n            </div>\n        </div>\n        \n    </section>)\n}"],"names":["TableColumn","_ref","id","title","active","refEditable","useRef","isEdit","setIsEdit","useState","dispatch","useAppDispatch","_jsxs","className","concat","undefined","onClick","tablesActions","setActiveTable","onDoubleClick","onMouseLeave","children","_jsx","onSubmit","event","preventDefault","current","editTable","newTitle","value","ref","defaultValue","TodoItem","completed","todoRef","isEmpty","type","checked","onChange","onEditChecked","todosActions","editTodoStatus","editTodo","onDelete","removeTodo","TodoList","todos","useAppSelector","state","activeTable","tables","useEffect","async","q","query","collection","db","where","tableId","querySnapshot","getDocs","empty","docs","map","doc","_objectSpread","data","console","log","getTodosByTableId","then","preparedTodos","td","parseInt","Id","Title","TableId","Completed","setTodos","onCreateTask","addTodo","faker","number","int","ProfilePage","getTables","tabls","forEach","tab","addTable","table","handleAddTodo","length"],"sourceRoot":""}